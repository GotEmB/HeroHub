#!/usr/bin/env node

// Generated by IcedCoffeeScript 1.3.3b
// Readable version -> setup.coffee
(function() {
  var child, cp, fs, iced, main, verbose, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  fs = require("fs");

  cp = require("child_process");

  verbose = process.argv.indexOf("-v" !== -1);

  child = function() {
    var args, cps, funErr, funExit, funOut, funs, prc;
    prc = arguments[0], args = arguments[1], funs = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    funOut = funErr = funExit = null;
    if (funs.length === 1) {
      funExit = funs[0];
    } else if (funs.length === 2) {
      funOut = funErr = funs[0];
      funExit = funs[1];
    } else if (funs.length === 3) {
      funOut = funs[0];
      funErr = funs[1];
      funExit = funs[2];
    }
    cps = cp.spawn(prc, args);
    cps.stdout.on("data", function(data) {
      if (verbose) process.stdout.write(data);
      if (funOut != null) return funOut(data);
    });
    cps.stderr.on("data", function(data) {
      if (verbose) process.stderr.write(data);
      if (funErr != null) return funErr(data);
    });
    return cps.on("exit", funExit);
  };

  main = function() {
    var err, exitcode, stats, stdoe, url, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "setup.coffee",
        funcname: "main"
      });
      fs.stat(".ssh/id_rsa", __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return stats = arguments[1];
          };
        })(),
        lineno: 28
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (!(typeof err !== "undefined" && err !== null) || err.code !== "ENOENT") {
        console.error("An RSA key already exists in '.ssh'");
        console.info("Exiting. Nothing done.");
        return;
      }
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "setup.coffee",
          funcname: "main"
        });
        fs.stat(".ssh", __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return stats = arguments[1];
            };
          })(),
          lineno: 33
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if ((typeof err !== "undefined" && err !== null) && err.code === "ENOENT") {
          fs.mkdirSync(".ssh");
        }
        process.stdout.write("Generating RSA Key for HeroHub..." + (verbose ? "\n" : ""));
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "setup.coffee",
            funcname: "main"
          });
          child("ssh-keygen", ["-f", ".ssh/id_rsa", "-N", "", "-C", "HeroHub"], __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return exitcode = arguments[0];
              };
            })(),
            lineno: 37
          }));
          __iced_deferrals._fulfill();
        })(function() {
          console.info("Done");
          process.stdout.write("Uploading RSA Key to Heroku..." + (verbose ? "\n" : ""));
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "setup.coffee",
              funcname: "main"
            });
            child("heroku", ["keys:add", ".ssh/id_rsa.pub"], __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return exitcode = arguments[0];
                };
              })(),
              lineno: 41
            }));
            __iced_deferrals._fulfill();
          })(function() {
            console.info("Done");
            process.stdout.write("Creating Heroku App..." + (verbose ? "\n" : ""));
            stdoe = "";
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "setup.coffee",
                funcname: "main"
              });
              child("heroku", ["apps:create"], (function(data) {
                return stdoe += data;
              }), (function(data) {
                return stdoe += data;
              }), __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return exitcode = arguments[0];
                  };
                })(),
                lineno: 46
              }));
              __iced_deferrals._fulfill();
            })(function() {
              url = stdoe.match(/^(http:\/\/)([^ ]+)\.([^ ]+)(\.com\/)/m)[0];
              console.info("Done");
              process.stdout.write("Pushing Deployer App to Heroku..." + (verbose ? "\n" : ""));
              stdoe = "";
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "setup.coffee",
                  funcname: "main"
                });
                child("git", ["push", "heroku", "HEAD"], (function(data) {
                  return stdoe += data;
                }), (function(data) {
                  return stdoe += data;
                }), __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return exitcode = arguments[0];
                    };
                  })(),
                  lineno: 52
                }));
                __iced_deferrals._fulfill();
              })(function() {
                if ((stdoe.match(/failed/i)) != null) {
                  console.info("Failed");
                  console.error(stdoe);
                  return;
                } else {
                  console.info("Done");
                }
                return console.info("All processes completed successfully.\nYour deployer app identifier is '" + url[2] + "' and is hosted at '" + url[0] + "'.");
              });
            });
          });
        });
      });
    });
  };

  main();

}).call(this);
