#!/usr/bin/env node

// Generated by IcedCoffeeScript 1.3.3a
// Readable version -> setup.iced
var main, __iced_k, __iced_k_noop;

__iced_k = __iced_k_noop = function() {};

main = function() {
  var cp, cps, err, exitcode, fs, stats, stdoe, url, ___iced_passed_deferral, __iced_deferrals, __iced_k,
    _this = this;
  __iced_k = __iced_k_noop;
  ___iced_passed_deferral = iced.findDeferral(arguments);
  fs = require("fs");
  cp = require("child_process");
  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      parent: ___iced_passed_deferral,
      funcname: "main"
    });
    fs.stat(".ssh/id_rsa", __iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          err = arguments[0];
          return stats = arguments[1];
        };
      })(),
      lineno: 7
    }));
    __iced_deferrals._fulfill();
  })(function() {
    if ((typeof err !== "undefined" && err !== null) || err.code !== "ENOENT") {
      console.error("An RSA key already exists in '.ssh'");
      console.info("Exiting. Nothing done.");
      return;
    }
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        funcname: "main"
      });
      fs.stat(".ssh", __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return stats = arguments[1];
          };
        })(),
        lineno: 12
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if ((typeof err !== "undefined" && err !== null) && err.code === "ENOENT") {
        fs.mkdirSync(".ssh");
      }
      process.stdout.write("Generating RSA Key for HeroHub...");
      cps = cp.spawn("ssh-keygen", ["-f", ".ssh/keygen", "-N", "\"\"", "-C", "HeroHub"]);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          funcname: "main"
        });
        cps.exit.on(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return exitcode = arguments[0];
            };
          })(),
          lineno: 17
        }));
        __iced_deferrals._fulfill();
      })(function() {
        console.info("Done");
        process.stdout.write("Uploading RSA Key to Heroku...");
        cps = cp.spawn("heroku", ["keys:add", ".ssh/id_rsa.pub"]);
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            funcname: "main"
          });
          cps.exit.on(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return exitcode = arguments[0];
              };
            })(),
            lineno: 22
          }));
          __iced_deferrals._fulfill();
        })(function() {
          console.info("Done");
          process.stdout.write("Creating Heroku App...");
          cps = cp.spawn("heroku", ["apps:create"]);
          stdoe = "";
          cps.stdout.on(function(data) {
            return stdoe += data;
          });
          cps.stderr.on(function(data) {
            return stdoe += data;
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              funcname: "main"
            });
            cps.exit.on(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return exitcode = arguments[0];
                };
              })(),
              lineno: 30
            }));
            __iced_deferrals._fulfill();
          })(function() {
            url = stdoe.match(/^(http:\/\/)([^ ]+)\.([^ ]+)(\.com\/)/m)[0];
            console.info("Done");
            process.stdout.write("Pushing Deployer App to Heroku...");
            cps = cp.spawn("git", ["push", "heroku"]);
            stdoe = "";
            cps.stdout.on(function(data) {
              return stdoe += data;
            });
            cps.stderr.on(function(data) {
              return stdoe += data;
            });
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                funcname: "main"
              });
              cps.exit.on(__iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return exitcode = arguments[0];
                  };
                })(),
                lineno: 39
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if ((stdoe.match(/failed/i)) != null) {
                console.info("Failed");
                console.error(stdoe);
                return;
              } else {
                console.info("Done");
              }
              return console.info("All processes completed successfully.\nYour deployer app identifier is '" + url[2] + "' and is hosted at '" + url[0] + "'.");
            });
          });
        });
      });
    });
  });
};